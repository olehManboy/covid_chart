{"version":3,"sources":["components/cards/Cards.module.css","api/index.js","components/cards/Cards.jsx","components/chart/Chart.jsx","components/countrypicker/Countrypicker.jsx","App.js","index.js","App.module.css","components/chart/Chart.module.css","components/countrypicker/Countrypicker.module.css","images/image.png"],"names":["module","exports","url","fetchdata","country","a","changeableurl","axios","get","data","confirmed","recovered","deaths","lastUpdate","fetchDailyData","modified_data","map","dailydata","total","date","reportDate","fetchCountries","countries","name","console","log","Cards","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","seperator","Date","toDateString","Chart","useState","setdailydata","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","Countrypicker","handleCountryChange","fetchedCountries","setFetchedCountries","fetchApi","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","fetcheddata","this","src","image","React","Component","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.cb9ca31e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2rcre\",\"card\":\"Cards_card__1N7pj\",\"infected\":\"Cards_infected__wcxcq\",\"recovered\":\"Cards_recovered__3R3u8\",\"deaths\":\"Cards_deaths__2xaEy\"};","import axios from \"axios\";\n\nconst url = \"https://covid19.mathdro.id/api\";\n\nexport const fetchdata = async (country) => {\n\n    let changeableurl = url;\n\n    if(country){\n        changeableurl = `${url}/countries/${country}`\n    }\n\n    try{\n        const { data :{confirmed,recovered,deaths,lastUpdate}} = await axios.get(changeableurl);\n\n        return {confirmed,recovered,deaths,lastUpdate};\n    }\n    catch(error){\n\n    }\n\n}\n\nexport const fetchDailyData = async () => {\n    try {\n        const {data} = await axios.get(`${url}/daily`);\n        \n        const modified_data = data.map((dailydata)=>({\n            confirmed:dailydata.confirmed.total,\n            deaths:dailydata.deaths.total,\n            date:dailydata.reportDate,\n        }));\n        return modified_data;\n    }\n    catch(error){\n\n    }\n}\n\nexport const fetchCountries = async () => {\n\n    try{\n\n        const {data:{countries}} = await axios.get(`${url}/countries`);\n\n\n        return countries.map((country)=>country.name)\n    }\n    catch(error){\n        console.log(error)\n\n    }\n}","import React from \"react\";\nimport {Card,CardContent,Typography,Grid} from \"@material-ui/core\";\nimport styles from \"./Cards.module.css\";\nimport CountUp from \"react-countup\";\nimport cx from  \"classnames\";\n\nconst Cards = ({data:{confirmed,recovered,deaths,lastUpdate}}) => {\n    if(!confirmed){\n        return \"loading...\"\n    }\n    else{\n        console.log(confirmed)\n    }\n    return(\n        <div className={styles.container}>\n        <Grid container spacing={3} justify=\"space-between\">\n\n       \n            <Grid item spacing={3} component={Card}  xs={12} md={3}  className={cx(styles.card,styles.infected)}>\n                <CardContent>\n                    <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\n                    <Typography variant=\"h5\">  <CountUp start={0}end={confirmed.value}duration={2.5}seperator=\",\"/>\n                    </Typography>\n                    <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                    <Typography variant=\"body2\">number of active cases from covid</Typography>\n                </CardContent>\n            </Grid>\n\n            <Grid item component={Card}  xs={12} md={3}  className={cx(styles.card,styles.recovered)}>\n                <CardContent>\n                    <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\n                    <Typography variant=\"h5\">\n                        <CountUp start={0} end={recovered.value} duration={2.5} seperator=\",\"/>\n                    </Typography>\n                    <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                    <Typography variant=\"body2\">number of recovered cases from covid</Typography>\n                </CardContent>\n\n            </Grid>\n\n            <Grid item component={Card}  xs={12} md={3}  className={cx(styles.card,styles.deaths)}>\n                <CardContent>\n                    <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\n                    <Typography variant=\"h5\">\n                        <CountUp start={0} end={deaths.value}  duration={2.5} seperator=\",\" />\n                    </Typography>\n                    <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\n                    <Typography variant=\"body2\">number of deaths caused by covid</Typography>\n                </CardContent>\n\n            </Grid>\n\n\n        </Grid>\n\n        </div>\n    )\n}\n\nexport default Cards","import React,{useEffect,useState} from \"react\";\nimport { fetchDailyData } from \"../../api\";\nimport {Line,Bar} from \"react-chartjs-2\";\nimport styles from \"./Chart.module.css\";\n\nconst Chart = ({data : { confirmed,deaths,recovered },country}) => {\n    const [dailydata,setdailydata] = useState([]);\n\n    useEffect(()=>{\n        const fetchAPI = async() => {\n            setdailydata(await fetchDailyData());\n        }\n        \n        fetchAPI();\n\n    },[]);\n\n    const lineChart = (\n        dailydata.length ? (\n            <Line\n            data={{\n                labels:dailydata.map(({ date })=>(date)),\n                datasets:[{\n                    data:dailydata.map(({confirmed})=>(confirmed)),\n                    label:\"Infected\",\n                    borderColor:\"#3333ff\",\n                    fill:true,\n                },\n                {\n                    data:dailydata.map(({deaths})=>(deaths)),\n                    label:\"Deaths\",\n                    borderColor:\"red\",\n                    backgroundColor:\"rgba(255,0,0,0.5)\",\n                    fill:true,\n                }\n            ],\n            }}\n            />) : null\n            \n    );\n\n\n    const barChart = (\n        confirmed ? \n        (<Bar\n        data={{\n            labels:[\"Infected\",\"Recovered\",\"Deaths\"],\n            datasets:[{\n                label:'people',\n                backgroundColor:[\n                    'rgba(0,0,225,0.8)',\n                    'rgba(0,225,0,0.8)',\n                    'rgba(255,0,0,0.8)',\n                ],\n                data:[confirmed.value,recovered.value,deaths.value],\n            }]\n\n        }}\n        options={{\n            legend:{display:false},\n            title:{display:true,text:`Current state in ${country} `},\n        }}\n\n        \n        />):null\n    );\n    return(\n        <div className={styles.container}>\n\n            {country ? barChart: lineChart}\n\n        </div>\n    )\n}\n\nexport default Chart;","import React,{useState,useEffect} from \"react\";\nimport {NativeSelect , FormControl } from \"@material-ui/core\";\n\nimport styles from \"./Countrypicker.module.css\";\nimport {fetchCountries} from \"../../api\";\n\n\n const Countrypicker = ({handleCountryChange}) => {\n\n    const [fetchedCountries , setFetchedCountries] = useState([]);\n\n    useEffect(()=>{\n        const fetchApi = async() => {\n            setFetchedCountries(await fetchCountries())\n        }\n\n        fetchApi();\n    },[])\n\n    console.log(fetchedCountries)\n\n    \n    return(\n        <FormControl className={styles.formControl}>\n            <NativeSelect defaultValue=\"\" onChange={ (e)=>(handleCountryChange(e.target.value)) }>\n                <option value=\"\">Global</option>\n                {fetchedCountries.map((country,i)=><option key={i} value={country}>{country}</option>)}\n            </NativeSelect>\n        </FormControl>\n    )\n}\n\nexport default Countrypicker;","import React from \"react\";\nimport {fetchdata} from \"./api\";\nimport {Cards,Chart,Countrypicker} from \"./components\";\nimport styles from \"./App.module.css\";\nimport image from \"./images/image.png\";\n\nclass App extends React.Component{\n    state = {\n        data:{},\n        country:\"\",\n    }\n\n    async componentDidMount(){\n        const fetcheddata = await fetchdata();\n        this.setState({data:fetcheddata})\n    }\n\n    handleCountryChange = async(country)=>{\n        //console.log(country)\n        const fetchedData = await fetchdata(country);\n\n        this.setState({data:fetchedData,country:country})\n    }\n\n    render(){\n        const {data,country} = this.state;\n        return(\n\n            <div className={styles.container} >\n            <img src={image} className={styles.image}/>\n            <Cards data={data}/>\n            <Countrypicker handleCountryChange= {this.handleCountryChange}/>\n            <Chart data={data} country={country}/>  \n            </div>\n\n        );\n       \n    }\n}\n\nexport default App;","import React from \"react\";\nimport ReactDom from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDom.render(<App/>,document.getElementById(\"root\"));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__2Qe1l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"Countrypicker_formControl__2ZLXs\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}